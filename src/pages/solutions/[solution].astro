---
// @ts-ignore
import { t, astroI18n } from 'astro-i18n';
import navigation from '@/lib/i18n/navigation';
import PageLayout from '@/layouts/PageLayout.astro';
import Hero from '@/lib/components/Common/Hero/Hero.astro';
import Breadcrumbs from '@/lib/components/Core/Breadcrumbs.astro';
import { pagesIcons, servicesIcons } from '@/lib/config/icons';
import Section from '@/lib/components/Core/Section.astro';
import CallToAction from '@/lib/components/Content/CallToAction.astro';
import services from '@/lib/config/services';
import Card from '@/lib/components/Common/Card/Card.astro';
import FeatureButton from "@comp/Common/Button/FeatureButton.astro"
import { getCollection } from 'astro:content';
import CardPortfolio from '@/lib/components/Common/Card/CardPortfolio.astro';

const currentLocale = astroI18n.langCode;

export const getStaticPaths = () => {
   return [
      { params: { solution: navigation.solutions.items.web.slug[astroI18n.langCode] }},
      { params: { solution: navigation.solutions.items.graphic.slug[astroI18n.langCode] }},
      { params: { solution: navigation.solutions.items.marketing.slug[astroI18n.langCode] }},
      { params: { solution: navigation.solutions.items.three_d.slug[astroI18n.langCode] }},
      { params: { solution: navigation.solutions.items.av.slug[astroI18n.langCode] }},
      { params: { solution: navigation.solutions.items.ai.slug[astroI18n.langCode] }},
   ]
}
const { solution } = Astro.params as { solution: string };

export const prerender = true;

// Get correct item key from navigation solutions
const itemKey: string = Object.keys(navigation.solutions.items).find((key) => {
   const solutionItem = navigation.solutions.items[key];
   return solutionItem.slug.nl === solution || solutionItem.slug.en === solution;
}) as string;


// === Data ===

// FEATURE CARDS
const featureCards = Object.entries(services[itemKey].content.features).map(([key, icon]: [string, string]) => {
      return {
         title: t(`services.${itemKey}.features.${key}.title`), 
         title_alt: t(`services.${itemKey}.features.${key}.title_alt`),
         text: t(`services.${itemKey}.features.${key}.text`), 
         icon
      }
   })
const featureGrid = featureCards.length % 3 === 0 ? 'grid-1-2-3' : 'grid-1-2-4';

// SERVICES CARDS
const servicesCards = Object.entries(services[itemKey].content.services).map(([key, icon]: [string, string]) => {
   return { 
      title: t(`services.${itemKey}.services.${key}.title`), 
      text: t(`services.${itemKey}.services.${key}.text`), 
      icon 
   }
})
const servicesGrid = servicesCards.length % 3 === 0 || servicesCards.length === 5 ? 'grid-1-2-3' : 'grid-1-2-4';

// CONTENT
const content = {
   title: t(`services.${itemKey}.title`),
   intro: t(`services.${itemKey}.intro`),
   services_intro: t(`services.${itemKey}.services_intro`),
}

// PORTFOLIO
const allPortfolio: any[] = await getCollection('portfolio');
const portfolio = allPortfolio.filter((item) => item.data.solution === itemKey).filter((item) => item.data.enabled);
---

<PageLayout title={navigation.solutions.items[itemKey].slug[currentLocale]}>
   
   <Hero slot="hero" subtitle={content.intro}>
      {content.title}
   </Hero>

   <Breadcrumbs slot="breadcrumbs" crumbs={[
      {label: navigation.solutions.title[currentLocale], slug: `/${navigation.solutions.slug[itemKey]}`, icon: pagesIcons.solutions},
      {label: navigation.solutions.items[itemKey].title[currentLocale], slug: `/${navigation.solutions.slug[currentLocale]}/${navigation.solutions.items[itemKey].slug[currentLocale]}`, icon: servicesIcons[itemKey]},
   ]}/>
   
   <!-- FEATURES SECTION -->
   <Section id={t('pages.solutions.sections.features.id')}>
      <div class={featureGrid}>
         { featureCards.map(feature => <FeatureButton animated {...feature}/> )}
      </div>
   </Section>
   <!-- END FEATURES SECTION -->

   <!-- SERVICES SECTION -->
   <Section 
      alt id={t('pages.solutions.sections.services.id')}
      title={t('pages.solutions.sections.services.title')}
      subtitle={content.services_intro}>
      <div class={servicesGrid}>
         { servicesCards.map(card => <Card type="static" element="li" {...card}>{card.text}</Card> )}
      </div>
   </Section>
   <!-- END SERVICES SECTION -->

   <!-- PORTFOLIO SECTION -->
   <Section 
      id={t('pages.solutions.sections.portfolio.id')}
      title={t('pages.solutions.sections.portfolio.title')}
      subtitle={t('pages.solutions.sections.portfolio.default_intro')}
   >
      <div class="grid-1-2">
         { (portfolio.length === 0) && ( <p>{t('common.messages.no_items_yet')}&nbsp;{t('common.messages.check_back_soon')}</p> ) }

         { portfolio.map(({data}) => (
            <CardPortfolio {...data} />
         ))}
      </div>
   </Section>
   <!-- END PORTFOLIO SECTION -->

   <!-- CTA -->
   <CallToAction />
   <!-- END CTA -->

</PageLayout>
