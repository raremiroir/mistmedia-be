---

   export interface Props {
      title: string;
      icon?: string;
      hasFooter?: boolean;
   }
   
   const {
      title,
      icon = '',
      hasFooter = false
   } = Astro.props;

   const styles = {
      modal: 'fixed z-[999] left-0 top-0 w-full h-full overflow-auto bg-primary-800/30 backdrop-blur-md flex items-center justify-center',
      inner: `relative w-4/5 bg-surface-50 my-10 mx-auto border border-surface-400 shadow-xl rounded-tile-xl overflow-hidden`,
      closer: `trans-fast h-10 w-10 pb-1 text-lg font-bold cursor-pointer
               bg-error-600 text-surface-200 hover:text-surface-50 hover:bg-error-800 hover:no-underline
               flex items-center justify-center rounded-full`,
      content: {
         header: 'py-4 px-6 bg-surface-300 w-full flex items-center justify-between gap-6',
         body: 'py-4 px-6 overflow-scroll',
         footer: 'py-4 px-6 bg-surface-700 color-white',
      }
   }
---

<script>
   const modalCloser = document.querySelector("#modal-closer");
   const modal = document.querySelector("#modal");
   const modalTrigger = document.querySelector("#modal-trigger");
   const modalContent = document.querySelector("#modal-content");

   let modalOpen = false;
   modalTrigger?.addEventListener('click', () => openModal());
   // @ts-ignore
   modalTrigger?.addEventListener('keydown', (e) => { if (e.key === 'Enter' || e.key === ' ') openModal(); })
   modalCloser?.addEventListener('click', () => closeModal());
   // @ts-ignore
   modalCloser?.addEventListener('keydown', (e) => { if (e.key === 'Enter' || e.key === ' ') closeModal(); })
   window.addEventListener('click', e => { if (e.target == modal) closeModal(); })
   window.addEventListener('keydown', e => { if (e.key === 'Escape') closeModal(); })
   
   function openModal() {
      modalOpen = true;
      modal?.classList.remove('fade-out'); modalContent?.classList.remove('modal-close-anim');
      modal?.classList.add('fade-in'); modalContent?.classList.add('modal-open-anim');
      modal?.classList.remove('hidden');
   }
   function closeModal() {
      modalOpen = false;
      modal?.classList.remove('fade-in'); modalContent?.classList.remove('modal-open-anim');
      modal?.classList.add('fade-out'); modalContent?.classList.add('modal-close-anim');
      setTimeout(() => {
         modal?.classList.add('hidden');
      }, 300);
   }
</script>


<!-- Trigger/Open The Modal -->
<div role="button" tabindex="0" id="modal-trigger">
   <slot name="trigger">Open Modal</slot>
</div>

<!-- The Modal -->
<div 
   id="modal" 
   class={`hidden ${styles.modal}`}>
  <!-- Modal content -->
   <div id="modal-content" class={`${styles.inner} modal-content`}>
      <!-- Header -->
      <div class={styles.content.header}>
         <h2 class="small">{title}</h2>
         <span id="modal-closer" role="button" tabindex="0" class={styles.closer}>&times;</span>
      </div>
      <!-- Body -->
      <div class={styles.content.body}>
         <slot>
            <p>Some text in the Modal Body</p>
            <p>Some other text...</p>
         </slot>
      </div>
      <!-- Footer -->
      {hasFooter && (
         <div class={styles.content.footer}>
            <slot name="footer">
            </slot>
         </div>
      )}
   </div>

</div>

<style>
   .modal-open-anim {
      animation-name: modalopen;
      animation-duration: 0.3s;
   }
   .modal-close-anim {
      animation-name: modalclose;
      animation-duration: 0.3s;
   }
   .fade-in {
      animation-name: fadein;
      animation-duration: 0.3s;
   }
   .fade-out {
      animation-name: fadeout;
      animation-duration: 0.3s;
   }

   /* Animation */
   @keyframes modalopen {
      from {top: 300px; opacity: 0}
      to {top: 0px; opacity: 1}
   }
   @keyframes modalclose {
      from {top: 0px; opacity: 1}
      to {top: 300px; opacity: 0}
   }
   @keyframes fadein {
      from {opacity: 0}
      to {opacity: 1}
   }
   @keyframes fadeout {
      from {opacity: 1}
      to {opacity: 0}
   }
</style>